
NOTE:
- Your time complexities should be expressed in big-O notation and be in
  terms of n, where n is the number of people who  have  been  added  to
  Friendbook.

===============
  FbUnfriend
===============

- Worst case time complexity: O(logn)

- Explanation: 
FbIsFriend is O(1), and nametoId is O(logn), as it use BST to search for required information in the map, 
and convert the input into id.
so the over all worst case time complexity is O(logn)

===============
FbMutualFriends
===============

- Worst case time complexity: O(n^2)

- Explanation: 
nametoId is O(logn), as it use BST to search for required information in the map, 
and convert the input into id.
ListAppend involve realloc function, which is O(n) complexity in worst case senario, 
since ListAppend is used inside a while loop, 
so the over all worst case time complexity is O(n^2)

===============
 FbFriendRecs1
===============

- Worst case time complexity: O(n^4)

- Explanation: 
FbMutualFriends has worst case of O(n^2),
ListSize has O(1),
However, both functions are located inside of a while loop.
Hence, overall worst case time complexity is O(n^4)

